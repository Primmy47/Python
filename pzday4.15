# Inheritance
# Attributes & Methods for the Child Class or Sub Class


class Car:
    """A simple attempt to represent a car."""

    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer = 5

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = (f"{self.year} {self.make} {self.model}")
        return long_name.upper()

    def read_odometer(self):
        """Print a car's mileage"""
        print(f"This car has {self.odometer} miles recorded.")

    def update_odometer(self, mileage):
        """Set the odometer reading to the given value."""
        self.odometer = mileage

    def increment_odometer(self, miles):
        """Add the given amount to the odometer reading."""
        self.odometer += miles


##########

class ElectricCar(Car):
    """Represent aspects of a car, specific to electric vehicles."""

    def __init__(self, make, model, year):
        """Initialize attributes of the parent class."""
        super().__init__(make, model, year)
        self.battery_size = 75

    def describe_battery(self):
        """Print a statement describing the battery size."""
        print(f"This car has a {self.battery_size}-kWh battery.")


my_tesla = ElectricCar('Tesla', 'model S', 2020)
print(my_tesla.get_descriptive_name())
my_tesla.describe_battery()